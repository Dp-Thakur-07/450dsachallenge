   void merge(int arr[], int low, int mid, int high)
{
    // Temporary vector to store the merged result
    vector<int> temp;
    int left = low;
    int right = mid + 1;

    // Merging two halves
    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        } else {
            temp.push_back(arr[right]);
            right++;
        }
    }

    // Copy the remaining elements of the left half, if any
    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }

    // Copy the remaining elements of the right half, if any
    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }

    // Copy the sorted elements back to the original array
    for (int i = low; i <= high; i++) {
        arr[i] = temp[i - low];
    }
}


void mergeSort(int arr[], int low, int high)
{
    // Base case: if the array has only one element
    if (low == high) {
        return;
    }

    // Find the middle point
    int mid = low + (high - low) / 2;

    // Recursively sort the first and second halves
    mergeSort(arr, low, mid);
    mergeSort(arr, mid + 1, high);

    // Merge the sorted halves
    merge(arr, low, mid, high);
}
