 int lowerbound(vector<int>&arr ,int n , int x){
      int low = 0 , high = n-1;
      int ans = n;
      while(low<=high){
          int mid = low+(high-low)/2;
          if(arr[mid]>=x){
              ans = mid;
              high = mid-1;
          }
          else{
              low = mid+1;
          }
          
      }
      return ans;
  }
  
  
    int rowWithMax1s(vector<vector<int> > &arr) {
        // code here
        int n = arr.size(),m=arr[0].size();
        int count_max = 0;
        int index = -1;
        // for every row we count the ones 
        for(int i =0;i<n;i++){
            int count_ones = m - lowerbound(arr[i],m,1);
            if(count_ones>count_max){
                count_max = count_ones;
                index = i;
            }
        }
        return index;
        
    }
